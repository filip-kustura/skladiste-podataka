-- Jedan redak u činjeničnoj tablici predstavlja jedan nastup jednog sportaša na jednim olimpijskim igarama u jednoj disciplini.

-- Definiramo činjeničnu tablicu i pripadne dimenzijske tablice u zvjezdastom modelu skladišta:
CREATE TABLE dYear
(
        year_id         SERIAL 		NOT NULL,
        anno_domini     SMALLINT 	NOT NULL,     -- označava godinu, npr. 2016
        
	summer_olympics BOOLEAN,       -- jesu li te godine održane ljetne OI?
        winter_olympics BOOLEAN,       -- jesu li te godine održane zimske OI?

        PRIMARY KEY     (year_id)
);

CREATE TABLE dAthlete
(
        athlete_id      SERIAL                  NOT NULL,
        athlete_id_db   INT                     NOT NULL,
        athlete_name    CHARACTER VARYING(120)  NOT NULL,
        
        athlete_gender  CHAR,
        athlete_height  SMALLINT,
        athlete_weight  SMALLINT,
        athlete_yob     SMALLINT,
        
        PRIMARY KEY     (athlete_id)
);

CREATE TABLE dGames
(
        games_id        SERIAL          NOT NULL,
        games_id_db     SMALLINT        NOT NULL,
        
        games_year      SMALLINT,
        games_season    CHARACTER VARYING(10),
        games_name      CHARACTER VARYING(40),
        
        city_id         INT,
        city_name       CHARACTER VARYING(40),
        
        noc_id          CHAR(3),
        region          CHARACTER VARYING(40),
        
        PRIMARY KEY     (games_id)
);

CREATE TABLE dEvent
(
        event_id        SERIAL  NOT NULL,
        event_id_db     INT     NOT NULL,

	event_name	CHARACTER VARYING(100),
        
        sport_id        SMALLINT,
        sport_name      CHARACTER VARYING(40),
        
        PRIMARY KEY     (event_id)
);

CREATE TABLE dNoc
(
        noc_id          SERIAL  NOT NULL,
        noc_id_db       CHAR(3) NOT NULL,
        
        region          CHARACTER VARYING(40),
        
        PRIMARY KEY     (noc_id)
);

CREATE TABLE dMedal
(
        medal_id        SERIAL          NOT NULL,
        medal_id_db     SMALLINT        NOT NULL,
        
        medal_name      CHARACTER VARYING(10),
        
        PRIMARY KEY     (medal_id)
);

CREATE TABLE cAppearance
(
        athlete_id      INT     NOT NULL,
        games_id        INT     NOT NULL,
        event_id        INT     NOT NULL,
        
        year_id         INT     NOT NULL,
        
        noc_id          CHAR(3),
        
	age             SMALLINT,      -- starost natjecatelja u trenutku natjecanja
        homecourt       BOOLEAN,        -- je li se natjecatelj natjecao na domaćem terenu?
        medal_id        INT,
        
        FOREIGN KEY     (athlete_id)    REFERENCES dAthlete,
        FOREIGN KEY     (games_id)      REFERENCES dGames,
        FOREIGN KEY     (event_id)      REFERENCES dEvent
        
        /*      Za primarni ključ nameće se skup (athlete_id, games_id, event_id).
                Međutim, ispostavlja se da ova tri atributa imaju duplikate (jer tablica athlete_event nema PK, nije normalizirana?)
                Iz tog razloga činjenična tablica neće imati primarni ključ, ali potrebno je napraviti indekse nad sva tri atributa.
                Dodat ćemo još indekse na atribute koji su strani ključevi.     */
);
CREATE INDEX idx1 ON cAppearance(athlete_id);
CREATE INDEX idx2 ON cAppearance(games_id);
CREATE INDEX idx3 ON cAppearance(event_id);
CREATE INDEX idx4 ON cAppearance(year_id);
CREATE INDEX idx5 ON cAppearance(noc_id);
CREATE INDEX idx6 ON cAppearance(medal_id);

-- Napunimo dimenzijske tablice i činjeničnu tablicu podacima iz nbp_rdb baze podataka:
INSERT INTO dYear (anno_domini)
SELECT generate_series(min(cast(games_year as integer)), max(cast(games_year as integer)))
FROM games;

UPDATE dYear
SET summer_olympics = (anno_domini IN   (SELECT games_year
                                        FROM games
                                        WHERE games_season = 'Summer'));
UPDATE dYear
SET winter_olympics = (anno_domini IN   (SELECT games_year
                                        FROM games
                                        WHERE games_season = 'Winter'));

INSERT INTO dAthlete (athlete_id_db, athlete_name, athlete_gender, athlete_height, athlete_weight, athlete_yob)
SELECT  a.athlete_id,
        a.athlete_name,
        a.athlete_gender,
        a.athlete_height,
        a.athlete_weight,
        a.athlete_yob
FROM athlete a;

INSERT INTO dGames (games_id_db, games_year, games_season, games_name, city_id, city_name, noc_id, region)
SELECT  g.games_id,
        g.games_year,
        g.games_season,
        g.games_name,
        c.city_id,
        c.city_name,
        n.noc_id,
        n.region
FROM games g
        LEFT JOIN city c ON g.city_id = c.city_id
        LEFT JOIN noc n ON c.noc_id = n.noc_id;

INSERT INTO dEvent (event_id_db, event_name, sport_id, sport_name)
SELECT  e.event_id,
        e.event_name,
        s.sport_id,
        s.sport_name
FROM event e
        LEFT JOIN sport s ON e.sport_id = s.sport_id;

INSERT INTO dNoc (noc_id_db, region)
SELECT  n.noc_id,
        n.region
FROM noc n;

INSERT INTO dMedal (medal_id_db, medal_name)
SELECT  m.medal_id,
        m.medal_name
FROM medal m;

/*      Jedini null podaci koji se pojavljuju u dimenzijskim tablicama su oni koji se odnose na nečije visine, težine i godinu rođenja i njih bismo mogli postaviti na, npr. -1.
        Međutim, te atribute (recimo godinu rođenja) kasnije možda agregiramo pa nam odgovaraju null vrijednosti.       */

INSERT INTO cAppearance (athlete_id, games_id, event_id, year_id, noc_id, medal_id, age, homecourt)
SELECT  dAthlete.athlete_id,
        dGames.games_id,
        dEvent.event_id,
        dYear.year_id,
        dNoc.noc_id,
        dMedal.medal_id,
        dGames.games_year - dAthlete.athlete_yob,       -- starost natjecatelja u trenutku natjecanja
        (case when dNoc.noc_id_db = dGames.noc_id then true     -- je li se natjecatelj natjecao na domaćem terenu?
        else false
        end)
FROM athlete_event
        JOIN dAthlete ON athlete_event.athlete_id = dAthlete.athlete_id_db
        JOIN dGames ON athlete_event.games_id = dGames.games_id_db
        JOIN dEvent ON athlete_event.event_id = dEvent.event_id_db
        JOIN dYear ON dGames.games_year = dYear.anno_domini
        LEFT JOIN dMedal ON athlete_event.medal_id = dMedal.medal_id_db
        LEFT JOIN dNoc ON athlete_event.noc_id = dNoc.noc_id_db;

-- SQL upiti:
-- top 10 najuspješnijih sportaša na ljetnim i top 10 najuspješnijih sportaša na zimskim OI nakon 1950. godine
SELECT athlete_name, COUNT(*) AS zbroj
FROM dAthlete, cAppearance, dYear
WHERE dAthlete.athlete_id = cAppearance.athlete_id
AND cAppearance.year_id = dYear.year_id
AND medal_id IS NOT NULL
AND dYear.summer_olympics IS TRUE       -- ljetne OI
AND dYear.anno_domini > 1950
GROUP BY athlete_name
ORDER BY 2 desc
LIMIT 10;

SELECT athlete_name, COUNT(*) AS zbroj
FROM dAthlete, cAppearance, dYear
WHERE dAthlete.athlete_id = cAppearance.athlete_id
AND cAppearance.year_id = dYear.year_id
AND medal_id IS NOT NULL
AND dYear.winter_olympics IS TRUE       -- zimske OI
AND dYear.anno_domini > 1950
GROUP BY athlete_name
ORDER BY 2 desc
LIMIT 10;

-- usporedba broja disciplina u kojima su se žene natjecale kroz vrijeme
-- pretpostavljam da ima smisla uspoređivati ljetne s ljetnim, odnosno zimske sa zimskim
SELECT anno_domini, COUNT(DISTINCT dEvent.event_id)
FROM cAppearance, dYear, dEvent, dAthlete
WHERE cAppearance.year_id = dYear.year_id
AND cAppearance.event_id = dEvent.event_id
AND cAppearance.athlete_id = dAthlete.athlete_id
AND upper(athlete_gender) = 'F'
AND summer_olympics is true     -- ljetne OI
GROUP BY anno_domini;

SELECT anno_domini, COUNT(DISTINCT dEvent.event_id)
FROM cAppearance, dYear, dEvent, dAthlete
WHERE cAppearance.year_id = dYear.year_id
AND cAppearance.event_id = dEvent.event_id
AND cAppearance.athlete_id = dAthlete.athlete_id
AND upper(athlete_gender) = 'F'
AND winter_olympics is true     -- zimske OI
GROUP BY anno_domini;

-- prosječna dob osvajača medalja po spolu u atletici i gimnastici (odvojeno) nakon 1970. godine
SELECT sport_name, AVG(age)
FROM dAthlete, cAppearance, dEvent, dYear
WHERE dAthlete.athlete_id = cAppearance.athlete_id
AND cAppearance.event_id = dEvent.event_id
AND cAppearance.year_id = dYear.year_id
AND anno_domini > 1970
GROUP BY sport_name
HAVING sport_name in ('Athletics', 'Gymnastics');